#ifndef __glhck_shader_h__
#define __glhck_shader_h__

#include "handle.h"

/* shader attrib locations */
enum glhckShaderAttrib {
   GLHCK_ATTRIB_VERTEX,
   GLHCK_ATTRIB_NORMAL,
   GLHCK_ATTRIB_TEXTURE,
   GLHCK_ATTRIB_COLOR,
   GLHCK_ATTRIB_LAST
};

/* glhck mappings for all shader uniforms (since 4.2 GL) */
enum glhckShaderVariableType {
   GLHCK_SHADER_FLOAT,
   GLHCK_SHADER_FLOAT_VEC2,
   GLHCK_SHADER_FLOAT_VEC3,
   GLHCK_SHADER_FLOAT_VEC4,
   GLHCK_SHADER_DOUBLE,
   GLHCK_SHADER_DOUBLE_VEC2,
   GLHCK_SHADER_DOUBLE_VEC3,
   GLHCK_SHADER_DOUBLE_VEC4,
   GLHCK_SHADER_INT,
   GLHCK_SHADER_INT_VEC2,
   GLHCK_SHADER_INT_VEC3,
   GLHCK_SHADER_INT_VEC4,
   GLHCK_SHADER_UNSIGNED_INT,
   GLHCK_SHADER_UNSIGNED_INT_VEC2,
   GLHCK_SHADER_UNSIGNED_INT_VEC3,
   GLHCK_SHADER_UNSIGNED_INT_VEC4,
   GLHCK_SHADER_BOOL,
   GLHCK_SHADER_BOOL_VEC2,
   GLHCK_SHADER_BOOL_VEC3,
   GLHCK_SHADER_BOOL_VEC4,
   GLHCK_SHADER_FLOAT_MAT2,
   GLHCK_SHADER_FLOAT_MAT3,
   GLHCK_SHADER_FLOAT_MAT4,
   GLHCK_SHADER_FLOAT_MAT2x3,
   GLHCK_SHADER_FLOAT_MAT2x4,
   GLHCK_SHADER_FLOAT_MAT3x2,
   GLHCK_SHADER_FLOAT_MAT3x4,
   GLHCK_SHADER_FLOAT_MAT4x2,
   GLHCK_SHADER_FLOAT_MAT4x3,
   GLHCK_SHADER_DOUBLE_MAT2,
   GLHCK_SHADER_DOUBLE_MAT3,
   GLHCK_SHADER_DOUBLE_MAT4,
   GLHCK_SHADER_DOUBLE_MAT2x3,
   GLHCK_SHADER_DOUBLE_MAT2x4,
   GLHCK_SHADER_DOUBLE_MAT3x2,
   GLHCK_SHADER_DOUBLE_MAT3x4,
   GLHCK_SHADER_DOUBLE_MAT4x2,
   GLHCK_SHADER_DOUBLE_MAT4x3,
   GLHCK_SHADER_SAMPLER_1D,
   GLHCK_SHADER_SAMPLER_2D,
   GLHCK_SHADER_SAMPLER_3D,
   GLHCK_SHADER_SAMPLER_CUBE,
   GLHCK_SHADER_SAMPLER_1D_SHADOW,
   GLHCK_SHADER_SAMPLER_2D_SHADOW,
   GLHCK_SHADER_SAMPLER_1D_ARRAY,
   GLHCK_SHADER_SAMPLER_2D_ARRAY,
   GLHCK_SHADER_SAMPLER_1D_ARRAY_SHADOW,
   GLHCK_SHADER_SAMPLER_2D_ARRAY_SHADOW,
   GLHCK_SHADER_SAMPLER_2D_MULTISAMPLE,
   GLHCK_SHADER_SAMPLER_2D_MULTISAMPLE_ARRAY,
   GLHCK_SHADER_SAMPLER_CUBE_SHADOW,
   GLHCK_SHADER_SAMPLER_BUFFER,
   GLHCK_SHADER_SAMPLER_2D_RECT,
   GLHCK_SHADER_SAMPLER_2D_RECT_SHADOW,
   GLHCK_SHADER_INT_SAMPLER_1D,
   GLHCK_SHADER_INT_SAMPLER_2D,
   GLHCK_SHADER_INT_SAMPLER_3D,
   GLHCK_SHADER_INT_SAMPLER_CUBE,
   GLHCK_SHADER_INT_SAMPLER_1D_ARRAY,
   GLHCK_SHADER_INT_SAMPLER_2D_ARRAY,
   GLHCK_SHADER_INT_SAMPLER_2D_MULTISAMPLE,
   GLHCK_SHADER_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
   GLHCK_SHADER_INT_SAMPLER_BUFFER,
   GLHCK_SHADER_INT_SAMPLER_2D_RECT,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_1D,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_2D,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_3D,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_CUBE,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_1D_ARRAY,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_2D_ARRAY,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_BUFFER,
   GLHCK_SHADER_UNSIGNED_INT_SAMPLER_2D_RECT,
   GLHCK_SHADER_IMAGE_1D,
   GLHCK_SHADER_IMAGE_2D,
   GLHCK_SHADER_IMAGE_3D,
   GLHCK_SHADER_IMAGE_2D_RECT,
   GLHCK_SHADER_IMAGE_CUBE,
   GLHCK_SHADER_IMAGE_BUFFER,
   GLHCK_SHADER_IMAGE_1D_ARRAY,
   GLHCK_SHADER_IMAGE_2D_ARRAY,
   GLHCK_SHADER_IMAGE_2D_MULTISAMPLE,
   GLHCK_SHADER_IMAGE_2D_MULTISAMPLE_ARRAY,
   GLHCK_SHADER_INT_IMAGE_1D,
   GLHCK_SHADER_INT_IMAGE_2D,
   GLHCK_SHADER_INT_IMAGE_3D,
   GLHCK_SHADER_INT_IMAGE_2D_RECT,
   GLHCK_SHADER_INT_IMAGE_CUBE,
   GLHCK_SHADER_INT_IMAGE_BUFFER,
   GLHCK_SHADER_INT_IMAGE_1D_ARRAY,
   GLHCK_SHADER_INT_IMAGE_2D_ARRAY,
   GLHCK_SHADER_INT_IMAGE_2D_MULTISAMPLE,
   GLHCK_SHADER_INT_IMAGE_2D_MULTISAMPLE_ARRAY,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_1D,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_2D,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_3D,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_2D_RECT,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_CUBE,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_BUFFER,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_1D_ARRAY,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_2D_ARRAY,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE,
   GLHCK_SHADER_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY,
   GLHCK_SHADER_UNSIGNED_INT_ATOMIC_COUNTER,
   GLHCK_SHADER_VARIABLE_TYPE_UNKNOWN,
   GLHCK_SHADER_VARIABLE_TYPE_LAST
};

/* glhck shader attribute type */
struct glhckShaderAttribute {
   const char *name;
   const char *typeName;
   unsigned int location;
   int size;
   enum glhckShaderVariableType type;
};

/* glhck shader uniform type */
struct glhckShaderUniform {
   const char *name;
   const char *typeName;
   unsigned int location;
   int size;
   enum glhckShaderVariableType type;
};

unsigned int _glhckShaderGetProgram(const glhckHandle handle);

#endif /* __glhck_shader_h__ */

/* vim: set ts=8 sw=3 tw=0 :*/
