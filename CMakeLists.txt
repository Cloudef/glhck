CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(ROOT)
SET(PROJECT_NAME "GLhck Rendering Engine")
SET(GLUE_DESCRIPTION "A dead simple OpenGL/GLES rendering engine")
OPTION(GLHCK_USE_GLES "Build for OpenGL ES" OFF)
OPTION(GLHCK_KAZMATH_FLOAT "Defines kmScalar as float" ON)

SET(LIB_OUT_DIR ${CMAKE_BINARY_DIR}/build/lib)
SET(TEST_OUT_DIR ${CMAKE_BINARY_DIR}/build/test)
SET(3RDPARTY_OUT_DIR ${CMAKE_BINARY_DIR}/build/3rdparty)
SET(GLHCK_INCLUDE_DIR ${CMAKE_BINARY_DIR}/lib/glhck/src/include)
SET(GLHCK_TEST_INCLUDE_DIR ${CMAKE_BINARY_DIR}/include)

# Tests will be linked and included against these
SET(GLHCK_TEST_INCL ${GLHCK_TEST_INCLUDE_DIR})
SET(GLHCK_TEST_LINK
   glhck
   glfw)

# Build checks
# Abort git submodule init && git submodule update
# has not been ran.
SET(SUBMODULE_ERROR "Run git submodule init && git submodule update first.")
IF (NOT EXISTS ${CMAKE_BINARY_DIR}/lib/kazmath/src/.git)
   SET(SUBMODULE_ERROR_THROW 1)
ELSEIF (NOT EXISTS ${CMAKE_BINARY_DIR}/lib/glfw/src/.git)
   SET(SUBMODULE_ERROR_THROW 1)
ENDIF ()

# If on unix try fix the error first
IF (UNIX)
IF (SUBMODULE_ERROR_THROW)
   EXECUTE_PROCESS(COMMAND "git" "submodule" "init"
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
      RESULT_VARIABLE git_result)
   IF (${git_result} == 0)
      EXECUTE_PROCESS(COMMAND "git" "submodule" "update"
         WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
         RESULT_VARIABLE git_result)
      IF (${git_result} == 0)
         SET(SUBMODULE_ERROR_THROW 0)
      ENDIF ()
   ENDIF ()
ENDIF ()
ENDIF ()

# Throw the error, if unix try fix it first
IF (SUBMODULE_ERROR_THROW)
   MESSAGE(FATAL_ERROR ${SUBMODULE_ERROR})
ENDIF ()

# Debug build
SET(CMAKE_BUILD_TYPE Debug)

# Release build
# SET(CMAKE_BUILD_TYPE Release)

IF (UNIX)
   FIND_PACKAGE(X11 REQUIRED)
   LIST(APPEND GLHCK_TEST_INCL ${X11_X11_INCLUDE_PATH})
   LIST(APPEND GLHCK_TEST_LINK ${X11_X11_LIB})
   LIST(APPEND GLHCK_TEST_LINK
      Xrandr
      Xxf86vm
      rt)
ENDIF (UNIX)

IF (PANDORA)
    ADD_DEFINITIONS(-DPANDORA)
    SET(GLHCK_USE_GLES 1)
ENDIF (PANDORA)

# Use floating point math on kazmath
IF (GLHCK_KAZMATH_FLOAT)
   ADD_DEFINITIONS(-DGLHCK_KAZMATH_FLOAT -DUSE_SINGLE_PRECISION)
ENDIF ()

# These are propably temporary
# In the end make renderers load this stuff dynamically(?)

IF (GLHCK_USE_GLES)
   # GLES
   SET(CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR}/CMake/modules)
   ADD_DEFINITIONS(-DGLES)
   FIND_PACKAGE(EGL REQUIRED)
   LIST(APPEND INCLUDE_DIR ${EGL_INCLUDE_DIR})
   LIST(APPEND GLHCK_TEST_LINK ${EGL_LIBRARY})
   FIND_PACKAGE(GLESv1 REQUIRED)
   LIST(APPEND INCLUDE_DIR ${GLESv1_INCLUDE_DIR})
   LIST(APPEND GLHCK_TEST_LINK ${GLESv1_LIBRARY})
ELSE ()
   # OPENGL
   FIND_PACKAGE(OpenGL REQUIRED)
   LIST(APPEND GLHCK_TEST_INCL ${OPENGL_INCLUDE_DIR})
   LIST(APPEND GLHCK_TEST_LINK ${OPENGL_gl_LIBRARY} GLEW)
ENDIF ()

ADD_SUBDIRECTORY(lib)
ADD_SUBDIRECTORY(3rdparty)
ADD_SUBDIRECTORY(test)
